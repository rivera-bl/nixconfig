#############################
## OPTIONS
#############################
set -ag terminal-overrides ",xterm-256color:RGB"

set -g mouse on
set -sg escape-time 0
set -s set-clipboard on
set -g focus-events on

#############################
## BINDS
#############################

# split vertically
unbind %
bind-key | split-window -h -c "#{pane_current_path}"
# split horizontally
unbind '"'
bind-key - split-window -v -c "#{pane_current_path}"

# zoom
unbind 'z'
# hook not working
# this doesnt work either because there is an automatically resize when changing panes in zoom-mode
# bind-key f run-shell "tmux resize-pane -Z && sh ~/code/personal/system/home/zsh/scripts/tmux_toggle_env TMUX_IS_ZOOMED"
bind-key f resize-pane -Z

# swap windows
bind-key -r < swap-window -t -
bind-key -r > swap-window -t +

# move pane to window even if it doesn't exist
bind-key m command-prompt -p "break pane to:" "break-pane -t '%%'"
# Join pane to window that already exists
# TODO replace right if 2, replace right-bottom is 3
bind-key M command-prompt -p "join pane to:" "join-pane -t '%%'"

#############################
## HOOKS
#############################
# # TODO fix this breaking
# # must be pane-focus-in { tmux_autozoom_nvim, tmux_last_pane }  
# #         pane-focus-out { tmux_last_pane }  
# # losing focus of tmux when changing programs in windows, is a pane-focus event so,
# # we should make a variable named TMUX_EVENT_PANE_FOCUS_OUT_CURRENT_COMMAND=
# # so if pane name is zsh then 1, else 0
# # if 1 execute the resize command, elif 0 exit
# #   define this variable here so its is visible
# #   the same with other shell scripts (meaning each script should have a continue?)
# set-hook -g pane-focus-in "run-shell -b \
#    'sh ~/code/personal/system/home/zsh/scripts/tmux_autozoom_nvim && \
#     sh ~/code/personal/system/home/zsh/scripts/tmux_last_pane'"
# set-hook -g pane-focus-out "run-shell \
#   'sh ~/code/personal/system/home/zsh/scripts/tmux_last_pane'"
# # make the function thinking in other event
# # could work with pane-focus-out with another function
# # it has to be a pane-focus in event too for the integration to work
# # set-hook -g pane-focus-in "run-shell \
#   'sh \${HOME}/.local/bin/tmux_last_pane.sh'"


##########
## JUMP
##########

# jump to last session
bind-key s switch-client -l

# jump to last pane server-wide, id taken with tmux_last_pane script 
bind-key d run-shell -b 'tmux switch-client -t $(tmux showenv TMUX_PANE_LAST | cut -d= -f2) && \
                         tmux select-window -t $(tmux showenv TMUX_PANE_LAST | cut -d= -f2)'

##########
##
##########

# easier paste than ]
bind-key p paste-buffer

# detach session
bind-key Q detach

# search in tmux buffer
bind-key / copy-mode \; send-key ?

# Dump tmux pane content into a file and open with vim
bind-key v 'capture-pane' \; \
  capture-pane -S - \; \
  save-buffer '/tmp/tmux-$(date -d "today" +"%m%d-%H%M")' \; \
  delete-buffer \; \
  send-keys 'vim /tmp/tmux-$(date -d "today" +"%m%d-%H%M")' Enter

# better vi copy-mode
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
bind-key -T copy-mode-vi q send-keys -X cancel

# send commands to all panes inside a window
bind C-t setw synchronize-panes \; display "▓░ synchronize (#{?synchronize-panes,on,off})"

# kill a pane.
bind-key q killp

# # switch to window and create it if doesn't exist
bind-key 1 if-shell 'tmux select-window -t :1' '' 'new-window -t :1'
bind-key 2 if-shell 'tmux select-window -t :2' '' 'new-window -t :2'
bind-key 3 if-shell 'tmux select-window -t :3' '' 'new-window -t :3'
bind-key 4 run-shell -b 'sh ~/code/personal/system/home/zsh/scripts/launch_fzf'              # menu of functions
# this could even be a vim mapping
bind-key 9 run-shell -b 'sh ~/code/personal/system/home/zsh/scripts/tmux_toggle_env TMUX_AUTOZOOM_NVIM'     # notes
bind-key 0 run-shell -b 'sh ~/code/personal/system/home/zsh/scripts/tmux_notes'     # notes

#############################
## FZF
#############################

# Smart pane switching with awareness of vim and fzf
forward_programs="view|n?vim?|fzf"

should_forward="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?($forward_programs)(diff)?$'"

bind -n C-h if-shell "$should_forward" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$should_forward" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$should_forward" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$should_forward" "send-keys C-l" "select-pane -R"
bind -n C-\\ if-shell "$should_forward" "send-keys C-\\" "select-pane -l"

# tmux-fzf
# binding not working in nixos, gotta create it manually, check tmux.nix extraConfig
# TMUX_FZF_LAUNCH_KEY="C-g"
# TMUX_FZF_PREVIEW=1 
# options: session|window|pane|command|keybinding|process|clipboard"
TMUX_FZF_ORDER="session|window|command|keybinding"
TMUX_FZF_PANE_FORMAT="[#{window_name}] #{pane_current_command}"
